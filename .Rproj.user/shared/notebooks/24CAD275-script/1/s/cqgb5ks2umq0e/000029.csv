"0",""
"0","  set.seed(1754)"
"0","  rf_model <- randomForest(eye_detection ~ ., data = train_data_selected, "
"0","                           ntree = 500, mtry = 12, maxdepth = 5, nodesize = 20, "
"0","                           sampsize = ceiling(0.7 * nrow(train_data_selected)), "
"0","                           classwt = c(0.5, 0.5), "
"0","                           importance = TRUE)"
"0",""
"0","  print(rf_model)"
"1","
Call:
"
"1"," "
"1","randomForest(formula = eye_detection ~ ., data = train_data_selected, "
"1"," "
"1","    ntree = 500, mtry = 12, maxdepth = 5, nodesize = 20, sampsize = ceiling(0.7 * "
"1"," "
"1","        nrow(train_data_selected)), classwt = c(0.5, 0.5), importance = TRUE)"
"1"," "
"1","
"
"1","               Type of random forest: "
"1",""
"1","classification"
"1",""
"1","
"
"1","                     Number of trees: "
"1",""
"1","500"
"1",""
"1","
"
"1","No. of variables tried at each split: "
"1",""
"1","12"
"1",""
"1","

"
"1","        OOB estimate of  error rate: "
"1",""
"1","5.39"
"1",""
"1","%
"
"1","Confusion matrix:
"
"1"," "
"1","   0"
"1","   1"
"1"," class.error"
"1","
0"
"1"," 393"
"1","  15"
"1","  0.03676471"
"1","
1"
"1","  29"
"1"," 379"
"1","  0.07107843"
"1","
"
"0","  train_predictions_rf <- predict(rf_model, newdata = train_data_selected, type = ""class"")"
"0","  train_accuracy_rf <- mean(train_predictions_rf == train_data_selected$eye_detection)"
"0","  cat(""Random Forest Training Accuracy:"", train_accuracy_rf, ""\n"")"
"1","Random Forest Training Accuracy:"
"1"," "
"1","0.9889706"
"1"," "
"1","
"
"0","  test_predictions_rf <- predict(rf_model, newdata = test_data_selected, type = ""class"")"
"0","  test_accuracy_rf <- mean(test_predictions_rf == test_data_selected$eye_detection)"
"0","  cat(""Random Forest Test Accuracy:"", test_accuracy_rf, ""\n"")"
"1","Random Forest Test Accuracy:"
"1"," "
"1","0.9215686"
"1"," "
"1","
"
"0","  "
"0","  # 獲取概率預測並計算 ROC 和 AUC"
"0","test_prob_rf <- predict(rf_model, newdata = test_data_selected, type = ""prob"")"
"0","# 確保概率對應的類別順序與 eye_detection 一致"
"0","cat(""Levels of test_predictions_rf:"", levels(test_predictions_rf), ""\n"")"
"1","Levels of test_predictions_rf:"
"1"," "
"1","0"
"1"," "
"1","1"
"1"," "
"1","
"
"0","cat(""Column names of test_prob_rf:"", colnames(test_prob_rf), ""\n"")"
"1","Column names of test_prob_rf:"
"1"," "
"1","0"
"1"," "
"1","1"
"1"," "
"1","
"
"0","# 提取正類 (1) 的概率"
"0","if (""1"" %in% colnames(test_prob_rf)) {"
"0","  test_prob_rf_class1 <- test_prob_rf[, ""1""]"
"0","} else {"
"0","  stop(""Positive class probability '1' not found in Random Forest predictions. Check class levels."")"
"0","}"
"0",""
"0","# 將 eye_detection 轉換為數值向量 (0 和 1)"
"0","response_rf <- as.numeric(test_data_selected$eye_detection) - 1"
"0","cat(""Structure of response_rf:"", str(response_rf), ""\n"")"
"1"," num [1:204] "
"1",""
"1","0 0 0 0 0 0 0 0 0 0"
"1",""
"1"," ..."
"1",""
"1","
"
"1","Structure of response_rf:"
"1"," "
"1","
"
"0","# 計算 ROC 和 AUC"
"0","roc_rf <- roc(response_rf, test_prob_rf_class1)"
"0","auc_rf <- auc(roc_rf)"
"0","cat(""Random Forest AUC:"", auc_rf, ""\n"")"
"1","Random Forest AUC:"
"1"," "
"1","0.9725106"
"1"," "
"1","
"
"0","  "
"0","  # 混淆矩陣"
"0","conf_matrix_rf <- confusionMatrix(test_predictions_rf, test_data_selected$eye_detection)"
"0","print(conf_matrix_rf)"
"1","Confusion Matrix and Statistics

"
"1","          Reference
"
"1","Prediction"
"1","  0"
"1","  1"
"1","
         0"
"1"," 98"
"1"," 12"
"1","
         1"
"1","  4"
"1"," 90"
"1","
"
"1",""
"1","                         "
"1","                 "
"1","
"
"1","               Accuracy :"
"1"," 0.9216          "
"1","
"
"1","                 95% CI :"
"1"," (0.8758, 0.9545)"
"1","
"
"1","    No Information Rate :"
"1"," 0.5             "
"1","
"
"1","    P-Value [Acc > NIR] :"
"1"," < 2e-16         "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","                  Kappa :"
"1"," 0.8431          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1"," Mcnemar's Test P-Value :"
"1"," 0.08012         "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","            Sensitivity :"
"1"," 0.9608          "
"1","
"
"1","            Specificity :"
"1"," 0.8824          "
"1","
"
"1","         Pos Pred Value :"
"1"," 0.8909          "
"1","
"
"1","         Neg Pred Value :"
"1"," 0.9574          "
"1","
"
"1","             Prevalence :"
"1"," 0.5000          "
"1","
"
"1","         Detection Rate :"
"1"," 0.4804          "
"1","
"
"1","   Detection Prevalence :"
"1"," 0.5392          "
"1","
"
"1","      Balanced Accuracy :"
"1"," 0.9216          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","       'Positive' Class :"
"1"," 0               "
"1","
"
"1","                         "
"1","                 "
"1","
"
"0","  "
"0","  # 獲取變數重要性並篩選前 30 個特徵"
"0","  var_importance <- importance(rf_model)"
"0","  var_importance_df <- data.frame(Variable = rownames(var_importance), "
"0","                                  Importance = var_importance[, ""MeanDecreaseGini""]) %>%"
"0","    arrange(desc(Importance)) %>%"
"0","    head(30)"
"0",""
"0","  # 繪製前 10 個特徵的重要性"
"0","  var_importance_top10 <- var_importance_df %>% head(10)"
"0","  ggplot(var_importance_top10, aes(x = reorder(Variable, Importance), y = Importance)) +"
"0","    geom_bar(stat = ""identity"", fill = ""skyblue"") +"
"0","    coord_flip() +"
"0","    theme_minimal() +"
"0","    labs(title = ""Top 10 Variable Importance (MeanDecreaseGini)"", "
"0","         x = ""Variable"", y = ""Importance"") +"
"0","    theme(axis.text.y = element_text(size = 10, angle = 0, hjust = 1))"
