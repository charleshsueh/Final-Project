"0","sampling_rate <- 128"
"0","window_size <- 128"
"0","step_size <- 16 # 減少步長以增加數據點"
"0","n <- nrow(data)"
"0","channels <- eeg_vars"
"0",""
"0","delta_band <- c(0.5, 4)"
"0","theta_band <- c(4, 8)"
"0","alpha_band <- c(8, 13)"
"0","beta_band <- c(13, 30)"
"0","gamma_band <- c(30, 50)"
"0",""
"0","feature_data <- data.frame()"
"0",""
"0","for (start in seq(1, n - window_size + 1, by = step_size)) {"
"0","  end <- start + window_size - 1"
"0","  window_data <- data[start:end, channels]"
"0","  "
"0","  fft_features <- lapply(channels, function(ch) {"
"0","    signal <- window_data[[ch]]"
"0","    fft_result <- fft(signal)"
"0","    freq <- (0:(window_size-1)) * sampling_rate / window_size"
"0","    "
"0","    power <- abs(fft_result)^2 / window_size"
"0","    total_power <- sum(power, na.rm = TRUE) + 1e-10 # 避免除以 0"
"0","    "
"0","    delta_idx <- which(freq >= delta_band[1] & freq <= delta_band[2])"
"0","    theta_idx <- which(freq >= theta_band[1] & freq <= theta_band[2])"
"0","    alpha_idx <- which(freq >= alpha_band[1] & freq <= alpha_band[2])"
"0","    beta_idx <- which(freq >= beta_band[1] & freq <= beta_band[2])"
"0","    gamma_idx <- which(freq >= gamma_band[1] & freq <= gamma_band[2])"
"0","    "
"0","    delta_power <- sum(power[delta_idx], na.rm = TRUE) / total_power"
"0","    theta_power <- sum(power[theta_idx], na.rm = TRUE) / total_power"
"0","    alpha_power <- sum(power[alpha_idx], na.rm = TRUE) / total_power"
"0","    beta_power <- sum(power[beta_idx], na.rm = TRUE) / total_power"
"0","    gamma_power <- sum(power[gamma_idx], na.rm = TRUE) / total_power"
"0","    "
"0","    c(delta_power = delta_power, theta_power = theta_power, "
"0","      alpha_power = alpha_power, beta_power = beta_power, "
"0","      gamma_power = gamma_power)"
"0","  })"
"0","  "
"0","  fft_features_df <- as.data.frame(do.call(rbind, fft_features))"
"0","  colnames(fft_features_df) <- c(""delta_power"", ""theta_power"", ""alpha_power"", ""beta_power"", ""gamma_power"")"
"0","  fft_features_df$channel <- channels"
"0","  fft_features_df$window_start <- start"
"0","  "
"0","  feature_data <- rbind(feature_data, fft_features_df)"
"0","}"
"0",""
"0","feature_data_wide <- feature_data %>%"
"0","  pivot_wider(names_from = channel, values_from = c(""delta_power"", ""theta_power"", ""alpha_power"", ""beta_power"", ""gamma_power""),"
"0","              names_glue = ""fft_{.value}_{channel}"")"
"0",""
"0","window_centers <- seq(1, n - window_size + 1, by = step_size) + (window_size / 2)"
"0","window_centers <- round(window_centers)"
"0","data_reduced <- data[window_centers, ]"
"0",""
"0","if (nrow(data_reduced) != nrow(feature_data_wide)) {"
"0","  min_rows <- min(nrow(data_reduced), nrow(feature_data_wide))"
"0","  data_reduced <- data_reduced[1:min_rows, ]"
"0","  feature_data_wide <- feature_data_wide[1:min_rows, ]"
"0","}"
"0",""
"0","data_reduced <- cbind(data_reduced, feature_data_wide)"
