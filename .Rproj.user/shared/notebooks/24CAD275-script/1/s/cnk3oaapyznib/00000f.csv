"0","# 自定義學習曲線函數（更新以包含邏輯回歸和隨機森林）"
"0","learning_curve <- function(model_type, train_data, test_data) {"
"0","  train_sizes <- seq(0.2, 1.0, by = 0.2)"
"0","  results <- data.frame(Train_Size = numeric(), Train_Accuracy = numeric(), Test_Accuracy = numeric())"
"0","  "
"0","  for (size in train_sizes) {"
"0","    set.seed(1754)"
"0","    subset_index <- createDataPartition(train_data$eye_detection, p = size, list = FALSE)"
"0","    subset_train <- train_data[subset_index, ]"
"0","    "
"0","    if (model_type == ""rf"") {"
"0","      model <- randomForest(eye_detection ~ ., data = subset_train, "
"0","                            ntree = 500, mtry = 12, maxdepth = 5, nodesize = 20, "
"0","                            sampsize = ceiling(0.7 * nrow(subset_train)), "
"0","                            classwt = c(0.5, 0.5))"
"0","    } else if (model_type == ""logistic"") {"
"0","      model <- glm(eye_detection ~ ., data = subset_train, family = ""binomial"")"
"0","      train_pred <- predict(model, newdata = subset_train, type = ""response"")"
"0","      train_pred <- ifelse(train_pred > 0.5, 1, 0) %>% as.factor()"
"0","      levels(train_pred) <- levels(subset_train$eye_detection)"
"0","      test_pred <- predict(model, newdata = test_data, type = ""response"")"
"0","      test_pred <- ifelse(test_pred > 0.5, 1, 0) %>% as.factor()"
"0","      levels(test_pred) <- levels(test_data$eye_detection)"
"0","    } else if (model_type == ""svm"") {"
"0","      model <- svm(eye_detection ~ ., data = subset_train, "
"0","                   kernel = ""radial"", "
"0","                   gamma = 0.1, "
"0","                   cost = 1, "
"0","                   probability = TRUE)"
"0","    } else if (model_type == ""mlp"") {"
"0","      model <- train(eye_detection ~ ., data = subset_train, "
"0","                     method = ""nnet"", "
"0","                     trControl = trainControl(method = ""cv"", number = 5), "
"0","                     tuneGrid = expand.grid(size = 12, decay = 0.5), "
"0","                     preProcess = c(""center"", ""scale""),"
"0","                     maxit = 1000, trace = FALSE)"
"0","    } else if (model_type == ""knn"") {"
"0","      model <- train(eye_detection ~ ., data = subset_train,"
"0","                     method = ""knn"","
"0","                     trControl = trainControl(method = ""cv"", number = 5),"
"0","                     tuneGrid = expand.grid(k = 5),"
"0","                     preProcess = c(""center"", ""scale""))"
"0","    }"
"0","    "
"0","    if (model_type == ""logistic"") {"
"0","      train_acc <- mean(train_pred == subset_train$eye_detection)"
"0","      test_acc <- mean(test_pred == test_data$eye_detection)"
"0","    } else {"
"0","      train_pred <- predict(model, newdata = subset_train)"
"0","      test_pred <- predict(model, newdata = test_data)"
"0","      train_acc <- mean(train_pred == subset_train$eye_detection)"
"0","      test_acc <- mean(test_pred == test_data$eye_detection)"
"0","    }"
"0","    "
"0","    results <- rbind(results, data.frame(Train_Size = size * nrow(train_data), "
"0","                                         Train_Accuracy = train_acc, "
"0","                                         Test_Accuracy = test_acc))"
"0","  }"
"0","  return(results)"
"0","}"
"0",""
"0","# 計算學習曲線"
"0","rf_learning <- learning_curve(""rf"", train_data_selected, test_data_selected)"
"0","logistic_learning <- learning_curve(""logistic"", train_data_selected, test_data_selected)"
"0","svm_learning <- learning_curve(""svm"", train_data_selected, test_data_selected)"
"0","mlp_learning <- learning_curve(""mlp"", train_data_selected, test_data_selected)"
"0","knn_learning <- learning_curve(""knn"", train_data_selected, test_data_selected)"
"0",""
"0","# 合併數據並繪製"
"0","learning_data <- rbind("
"0","  data.frame(rf_learning, Model = ""Random Forest"", Type = ""Train"", Accuracy = rf_learning$Train_Accuracy),"
"0","  data.frame(rf_learning, Model = ""Random Forest"", Type = ""Test"", Accuracy = rf_learning$Test_Accuracy),"
"0","  data.frame(logistic_learning, Model = ""Logistic Regression"", Type = ""Train"", Accuracy = logistic_learning$Train_Accuracy),"
"0","  data.frame(logistic_learning, Model = ""Logistic Regression"", Type = ""Test"", Accuracy = logistic_learning$Test_Accuracy),"
"0","  data.frame(svm_learning, Model = ""SVM"", Type = ""Train"", Accuracy = svm_learning$Train_Accuracy),"
"0","  data.frame(svm_learning, Model = ""SVM"", Type = ""Test"", Accuracy = svm_learning$Test_Accuracy),"
"0","  data.frame(mlp_learning, Model = ""MLP"", Type = ""Train"", Accuracy = mlp_learning$Train_Accuracy),"
"0","  data.frame(mlp_learning, Model = ""MLP"", Type = ""Test"", Accuracy = mlp_learning$Test_Accuracy),"
"0","  data.frame(knn_learning, Model = ""kNN"", Type = ""Train"", Accuracy = knn_learning$Train_Accuracy),"
"0","  data.frame(knn_learning, Model = ""kNN"", Type = ""Test"", Accuracy = knn_learning$Test_Accuracy)"
"0",")"
"0",""
"0","ggplot(learning_data, aes(x = Train_Size, y = Accuracy, color = Model, linetype = Type)) +"
"0","  geom_line(size = 1) +"
"0","  theme_minimal() +"
"0","  labs(title = ""Learning Curves for All Models"", x = ""Training Sample Size"", y = ""Accuracy"") +"
"0","  scale_color_manual(values = c(""Random Forest"" = ""purple"", ""Logistic Regression"" = ""orange"", "
"0","                                ""SVM"" = ""blue"", ""MLP"" = ""red"", ""kNN"" = ""green""))"
